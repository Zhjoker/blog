(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{490:function(t,a,r){"use strict";r.r(a);var e=r(33),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Zhjoker/blog-pic/imgs/20200822154327.png",alt:""}})]),r("p",{staticStyle:{"text-indent":"23px"}},[t._v("​\ntradingview 一个专业金融图表网站，前段时间刚好又用了一次，相关的资料比较少，写下自己的开发体验，希望可以帮到后来者。\n")]),r("p"),t._v(" "),r("h2",{attrs:{id:"一-tradingview-授权申请"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一-tradingview-授权申请"}},[t._v("#")]),t._v(" 一.tradingview 授权申请")]),t._v(" "),r("p",[t._v("  虽然TradingView是一款开源插件,但是要使用它还是得需要官方的授权,使用github账号申请,申请地址,申请完之后可访问自己私有仓库。")]),t._v(" "),r("h2",{attrs:{id:"二-插件引入"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二-插件引入"}},[t._v("#")]),t._v(" 二.插件引入")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Zhjoker/blog-pic/imgs/20200822142343.png",alt:""}})]),t._v(" "),r("p",[t._v("插件下载完毕后会有如上所示文件"),r("code",[t._v("tv-chart*.html")]),t._v("会在插件运行后自动生成,除此之外还会有一些官方自带的demo.")]),t._v(" "),r("h2",{attrs:{id:"三-使用插件构造函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三-使用插件构造函数"}},[t._v("#")]),t._v(" 三.使用插件构造函数")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Zhjoker/blog-pic/imgs/20200822145732.png",alt:""}})]),t._v(" "),r("p",{staticStyle:{"text-indent":"23px"}},[t._v("\n上面就是tradingview的一个实例，也是最重要的一部分，所以给下面将主要介绍这个实例的参数\n")]),r("p"),r("h3",{attrs:{id:"_1-symbol"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-symbol"}},[t._v("#")]),t._v(" 1 Symbol")]),t._v(" "),r("p",[t._v("Symbol 直译过来叫“象征、符号”，这里引申为“商品”。K 线表现的是价格的变化趋势，至于是什么东西的价格，可以是股票，可以是货币，也可以是任何一样商品，TradingView 为了通用，提供了这么一个抽象的概念。一个 Symbol 就是一个 JS 对象，描述了商品的一些属性（名称、价格小数位、支持的时间分辨率、交易开放时间等，具体请参考官方文档），图表库会根据 Symbol 的定义，来决定改获取怎样的数据。商品名称的固定格式为 “EXCHANGE:SYMBOL”，SYMBOL 代表商品，例如一支股票、一个交易对；EXCHANGE 是交易所的名称，同一商品在不同交易所可能会有不同的价格，因此需要进行区分。")]),t._v(" "),r("h3",{attrs:{id:"_2-resolution"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-resolution"}},[t._v("#")]),t._v(" 2 Resolution")]),t._v(" "),r("p",[t._v("Resolution直译过来叫“分辨率”，这里指 K 线图中相邻两条柱子之间的时间间隔，我没研究过专业术语是不是就是用的这个词，不过个人感觉这就是一种说法，你用别的词也能表达这个意思，只不过 TradingView 选择了这个词。")]),t._v(" "),r("h3",{attrs:{id:"_3-study"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-study"}},[t._v("#")]),t._v(" 3 Study")]),t._v(" "),r("p",[t._v("Study 直译过来叫“学习、研究”，这里解释为“指标”，例如成交量、均线，以及其他各种分析指标。开发者可以通过 TradingView 提供的 API 自行添加。通过这些指标可以更好的的去分析数据。")]),t._v(" "),r("h3",{attrs:{id:"_4-chart"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-chart"}},[t._v("#")]),t._v(" 4 Chart")]),t._v(" "),r("p",[t._v("图表实例，特指 K 线图及相关的各项指标，不包含工具栏。一个图表实例可以包含多个指标")]),t._v(" "),r("h3",{attrs:{id:"_5-widget"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-widget"}},[t._v("#")]),t._v(" 5 Widget")]),t._v(" "),r("p",[t._v("小部件，和 Android 上的 Widget 一个概念。图表组件本身可以看做是一个容器，主要是一些工具栏，以及留给绘制真正图表的一块区域，不含图表本体。一个小部件实例可以包含多个图表实例")]),t._v(" "),r("h3",{attrs:{id:"_6-featureset"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-featureset"}},[t._v("#")]),t._v(" 6 FeatureSet")]),t._v(" "),r("p",[t._v("功能集，Widget 配置选项中的一部分，用于定制图表库的一些功能（包括显示与否、样式）。")]),t._v(" "),r("h3",{attrs:{id:"_7-overrides"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-overrides"}},[t._v("#")]),t._v(" 7 Overrides")]),t._v(" "),r("p",[t._v("覆盖，Widget 配置选项中的一部分，用于定制图表库的样式（主要是图表各部分的颜色）。整个图表库由外层 DOM 结构和内部多个 canvas 组成，因此样式相关的设置也分为两部分，这里是用于 canvas 部分的设置，另外还有一个 custom_css_url 属性用于指定一个 css 文件，其中可以覆盖 DOM 部分的样式。具体的可以结合官方文档，以及 Chrome DevTool 来定位。")]),t._v(" "),r("h3",{attrs:{id:"_8-datafeed"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-datafeed"}},[t._v("#")]),t._v(" 8 DataFeed")]),t._v(" "),r("p",[t._v("数据源，也就是接下来要讲的东西。它是 TradingView 获取、处理数据的方法集合，也是 TradingView 数据接入的核心所在，需要用户自己实现。它可以是一个 class 的实例，也可以就是一个简单的对象。")]),t._v(" "),r("h2",{attrs:{id:"四-如何接入自己的数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四-如何接入自己的数据"}},[t._v("#")]),t._v(" 四.如何接入自己的数据")]),t._v(" "),r("p",[t._v("  创建图表库实例并不难，看过文档和上手案例的应该都能懂，难的在于怎么把数据给填进去。相信绝大部分为 TradingView 头疼的朋友都是卡在了这里，只要数据接通了，剩下的都是小问题。TradingView 之所能通用，在于它做到了数据和表现分离，图表库本身只提供表现的部分，不管你有什么样的数据，只要能整理成指定的格式填进去，就行。说白了，需要开发者自行实现一个适配器。")]),t._v(" "),r("blockquote",[r("p",[t._v("TradingView 提供了两种获取数据的方式，基于 HTTP 的方案（UDF，Universal Data Feed，主仓库中的演示案例就是用的这种），和基于 WebSocket 的方案（JS API）")])]),t._v(" "),r("h3",{attrs:{id:"_1-udf"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-udf"}},[t._v("#")]),t._v(" 1 UDF")]),t._v(" "),r("p",[t._v("UDF 是 TradingView 自己定义的一套协议。本质上其实也是调用的 JS API。协议基于 HTTP + 轮询，通过 HTTP 请求查询指定条件下的历史数据，然后不断轮询检查是否有新数据。")]),t._v(" "),r("h3",{attrs:{id:"_2-jsapi"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-jsapi"}},[t._v("#")]),t._v(" 2 JSAPI")]),t._v(" "),r("p",[t._v("官方文档对各个 API 都进行了描述，其中必备的有 onReady() 、 resolveSymbol() 、 getBars() 、 subscribeBars() 、 unsubscribeBars() ，剩下的根据需要自行实现。具体将会在一篇数据接口中具体介绍")]),t._v(" "),r("h2",{attrs:{id:"五-基础图表方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#五-基础图表方法"}},[t._v("#")]),t._v(" 五.基础图表方法")]),t._v(" "),r("p",[t._v("  下面来说一下图标中都会用到的基本方法，比如说给自己图表添加技术指标,或者添加一些自定义按钮")]),t._v(" "),r("h3",{attrs:{id:"_1-添加技术指标"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-添加技术指标"}},[t._v("#")]),t._v(" 1 添加技术指标")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Zhjoker/blog-pic/imgs/20200822145732.png",alt:""}}),t._v(" "),r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Zhjoker/blog-pic/imgs/20200822155053.png",alt:""}})]),t._v(" "),r("h3",{attrs:{id:"_2-添加自定义按钮"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-添加自定义按钮"}},[t._v("#")]),t._v(" 2 添加自定义按钮")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Zhjoker/blog-pic/imgs/20200822155313.png",alt:""}})]),t._v(" "),r("h2",{attrs:{id:"end"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#end"}},[t._v("#")]),t._v(" end")]),t._v(" "),r("p",{staticStyle:{color:"#666"}},[t._v("希望看了上文你也可以快速搭建起一个属于你的trdingview图表 😊")]),t._v(" "),r("footer",{staticStyle:{"margin-top":"50px"}},[r("p",{staticStyle:{"text-align":"center",margin:"0"}},[t._v("✨✨✨")]),t._v(" "),r("p",{staticStyle:{"text-align":"center","font-size":"16px",color:"#999999",margin:"0"}},[t._v("关注我,获取最新的前端资讯 ")]),t._v(" "),r("p",{staticStyle:{"text-align":"center",margin:"0"}},[t._v("✨✨✨✨✨✨")]),t._v(" "),r("img",{staticStyle:{"margin-top":"10px"},attrs:{src:"https://cdn.jsdelivr.net/gh/Zhjoker/blog-pic/imgs/blog-qrcode.gif"}})])])}),[],!1,null,null,null);a.default=s.exports}}]);